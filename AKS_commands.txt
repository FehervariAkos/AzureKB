az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 1 --enable-addons monitoring --generate-ssh-keys
az account set --subscription <AKSt hosztoló előfizetés>

Set-AzContext -Subscriptionid 5623e453-f5fd-491d-9ee6-5fbd7f6bb053
Import-AzAksCredential -ResourceGroupName hun-ext-aks-rg -name hun-ext-aks  #Enélkül nem találja az RG-t

az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
kubectl get service myService --watch
describe svc myService

# https://docs.microsoft.com/en-us/learn/modules/aks-workshop/02-deploy-aks

$REGION_NAME="westeurope"
$RESOURCE_GROUP="hun-dev-18069-rg"
$SUBNET_NAME="hun-dev-18069-aks-subnet"
$VNET_NAME="hun-dev-18069-aks-vnet"
$ACR_NAME="hundev18069acr1234"
$AKS_CLUSTER_NAME="aksworkshop-1234"
$SUBNET_ID=(az network vnet subnet show --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --name $SUBNET_NAME --query id -o tsv)
$VERSION=(az aks get-versions --location $REGION_NAME --query 'orchestrators[?!isPreview] | [-1].orchestratorVersion' --output tsv)
az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME

az network vnet create --resource-group $RESOURCE_GROUP --location $REGION_NAME --name $VNET_NAME --address-prefixes 10.0.0.0/8 --subnet-name $SUBNET_NAME --subnet-prefixes 10.240.0.0/16

az aks create --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME --vm-set-type VirtualMachineScaleSets --node-count 2 --load-balancer-sku standard --location $REGION_NAME --kubernetes-version $VERSION --network-plugin azure --vnet-subnet-id $SUBNET_ID --service-cidr 10.2.0.0/24 --dns-service-ip 10.2.0.10 --docker-bridge-address 172.17.0.1/16 --generate-ssh-keys

kubectl get nodes
kubectl get namespace
kubectl create namespace ratingsapp

# acr create
az acr create --resource-group $RESOURCE_GROUP --location $REGION_NAME --name $ACR_NAME --sku Standard

# build ratings-api
git clone https://github.com/MicrosoftDocs/mslearn-aks-workshop-ratings-api.git
cd mslearn-aks-workshop-ratings-api
az acr build --resource-group $RESOURCE_GROUP --registry $ACR_NAME --image ratings-api:v1 .

# build ratings-web
git clone https://github.com/MicrosoftDocs/mslearn-aks-workshop-ratings-web.git
cd mslearn-aks-workshop-ratings-web
az acr build --resource-group $RESOURCE_GROUP --registry $ACR_NAME --image ratings-web:v1 .

az acr repository list --name $ACR_NAME --output table

# connect/authenticate AKS to ACR
az aks update --name $AKS_CLUSTER_NAME --resource-group $RESOURCE_GROUP --attach-acr $ACR_NAME

helm repo add bitnami https://charts.bitnami.com/bitnami

helm install ratings bitnami/mongodb --namespace ratingsapp --set auth.username="dbuser",auth.password="Password123",auth.database=ratingsdb
kubectl create secret generic mongosecret --namespace ratingsapp --from-literal=MONGOCONNECTION="mongodb://dbuser:Password123@ratings-mongodb.ratingsapp:27017/ratingsdb"
kubectl describe secret mongosecret --namespace ratingsapp

# deploy ratings-api
code ratings-api-deployment.yaml
kubectl apply -f ./ratings-api-deployment.yaml --namespace ratingsapp

# create service for ratings-api
code ratings-api-service.yaml
# (...)
kubectl apply --namespace ratingsapp -f ratings-api-service.yaml
kubectl get service ratings-api --namespace ratingsapp
kubectl get endpoints ratings-api --namespace ratingsapp

# create ratings-web
code ratings-web-deployment.yaml
# (...)
kubectl apply --namespace ratingsapp -f ratings-web-deployment.yaml

# create service for ratings-web
code ratings-web-service.yaml
# (...)
kubectl apply --namespace ratingsapp -f ratings-web-service.yaml

kubectl get service ratings-web --namespace ratingsapp -w

# create ingress controller
kubectl create namespace ingress
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install nginx-ingress ingress-nginx/ingress-nginx --namespace ingress --set controller.replicaCount=2 --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
kubectl get services --namespace ingress -w

# replace loadbalancer with clusterip
code ratings-web-service.yaml
kubectl delete service --namespace ratingsapp ratings-web
kubectl apply --namespace ratingsapp -f ratings-web-service.yaml

code ratings-web-ingress.yaml
kubectl apply --namespace ratingsapp -f ratings-web-ingress.yaml

# create cert-manager
kubectl create namespace cert-manager
helm repo add jetstack https://charts.jetstack.io
helm repo update
kubectl apply --validate=false -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.14/deploy/manifests/00-crds.yaml
helm install cert-manager --namespace cert-manager --version v0.14.0 jetstack/cert-manager
kubectl get pods --namespace cert-manager
code cluster-issuer.yaml
# (...)
kubectl apply --namespace ratingsapp -f cluster-issuer.yaml

# Enable SSL/TLS for the ratings web service on Ingress
code ratings-web-ingress.yaml
kubectl apply --namespace ratingsapp -f ratings-web-ingress.yaml
kubectl describe cert ratings-web-cert --namespace ratingsapp

# Create a Log Analytics workspace
$WORKSPACE="hun-dev-16069-laws-1234"
az resource create --resource-type Microsoft.OperationalInsights/workspaces --name $WORKSPACE --resource-group $RESOURCE_GROUP --location $REGION_NAME --properties '{}' -o table

# Enable the AKS monitoring add-on
$WORKSPACE_ID=az resource show --resource-type Microsoft.OperationalInsights/workspaces --resource-group $RESOURCE_GROUP --name $WORKSPACE --query "id" -o tsv
az aks enable-addons --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME --addons monitoring --workspace-resource-id $WORKSPACE_ID

# Configure Kubernetes RBAC to enable live log data
code logreader-rbac.yaml
# (...)
kubectl apply-f logreader-rbac.yaml

# Create the horizontal pod autoscaler
code ratings-api-hpa.yaml
# (...)
kubectl apply --namespace ratingsapp -f ratings-api-hpa.yaml

# Run a load test with horizontal pod autoscaler enabled
$LOADTEST_API_ENDPOINT="https://frontend.20.73.137.176.nip.io/api/loadtest"
az container create -g $RESOURCE_GROUP -n loadtest --cpu 4 --memory 1 --image azch/artillery --restart-policy Never --command-line "artillery quick -r 500 -d 120 $LOADTEST_API_ENDPOINT"
kubectl get hpa --namespace ratingsapp -

# Autoscale the cluster
code ratings-api-deployment.yaml
# (...)
kubectl apply --namespace ratingsapp -f ratings-api-deployment.yaml
kubectl get pods --namespace ratingsapp -l app=ratings-api -w
az aks update --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME --enable-cluster-autoscaler --min-count 3 --max-count 5
